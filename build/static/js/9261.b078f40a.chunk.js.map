{"version":3,"file":"static/js/9261.b078f40a.chunk.js","mappings":"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","sources":["components/Alert.js","components/Breadcrumbs.js","services/actions/complaintActions.js","services/actions/productActions.js","views/pages/lab/AddLab.js"],"sourcesContent":["import React from 'react'\nimport {\n    CAlert,\n} from '@coreui/react'\n\nexport const Alert = ({ msg, color }) => {\n    return (\n        <CAlert color={color} style={{ textAlign: 'center' }}>\n            {msg}\n        </CAlert>\n    )\n}\n\nexport default Alert","import React from 'react'\nimport { CBreadcrumb, CBreadcrumbItem } from '@coreui/react'\n\nconst Breadcrumbs = (props) => {\n  return (\n    <div className=\"row bg-white pt-2 pl-2 mb-4 \" style={{ margin: '0px 1px' }}>\n      <div className=\"col-12  \">\n        <CBreadcrumb\n          className=\"d-flex  align-items-center\"\n          style={{ '--cui-breadcrumb-divider': \"'>'\" }}\n        >\n          {props.breadCrumbsInfo &&\n            props.breadCrumbsInfo.length &&\n            props.breadCrumbsInfo.map((item) => {\n              return (\n                <CBreadcrumbItem href={item.href ? item.href : null}>{item.name}</CBreadcrumbItem>\n              )\n            })}\n        </CBreadcrumb>\n      </div>\n    </div>\n  )\n}\n\nexport default Breadcrumbs\n","import {\n  ADD_COMPLAINT_REQUEST,\n  ADD_COMPLAINT_SUCCESS,\n  ADD_COMPLAINT_FAIL,\n  ALL_COMPLAINT_REQUEST,\n  ALL_COMPLAINT_SUCCESS,\n  ALL_COMPLAINT_FAIL,\n  COMPLAINT_DCO_APPROVE_REQUEST,\n  COMPLAINT_DCO_APPROVE_SUCCESS,\n  COMPLAINT_DCO_APRROVE_FAIL,\n  COMPLAINT_DCO_REJECT_REQUEST,\n  COMPLAINT_DCO_REJECT_SUCCESS,\n  COMPLAINT_DCO_REJECT_FAIL,\n} from '../constants/complaintConstants'\nimport axios from 'axios'\nimport {BASE_URL} from \"../../services/axios\"\n\nexport const addComplaint = (Data) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ADD_COMPLAINT_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`${BASE_URL}/complaint`, Data, config)\n\n    dispatch({\n      type: ADD_COMPLAINT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ADD_COMPLAINT_FAIL,\n      payload:\n        error.response && error.response.data.message ? error.response.data.message : error.message,\n    })\n  }\n}\n\nexport const allComplaintAction = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ALL_COMPLAINT_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`${BASE_URL}/complaint`, config)\n\n    dispatch({\n      type: ALL_COMPLAINT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ALL_COMPLAINT_FAIL,\n      payload:\n        error.response && error.response.data.message ? error.response.data.message : error.message,\n    })\n  }\n}\n\nexport const complaintApproveByDco = (_id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: COMPLAINT_DCO_APPROVE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`${BASE_URL}/complaint/approvedByDco`, { _id }, config)\n\n    dispatch({\n      type: COMPLAINT_DCO_APPROVE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: COMPLAINT_DCO_APRROVE_FAIL,\n      payload:\n        error.response && error.response.data.message ? error.response.data.message : error.message,\n    })\n  }\n}\n\nexport const complaintRejectByDco = (_id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: COMPLAINT_DCO_REJECT_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`${BASE_URL}/complaint/rejectedByDco`, { _id }, config)\n\n    dispatch({\n      type: COMPLAINT_DCO_REJECT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: COMPLAINT_DCO_REJECT_FAIL,\n      payload:\n        error.response && error.response.data.message ? error.response.data.message : error.message,\n    })\n  }\n}\n","import {\n  ADD_PRODUCT_REQUEST,\n  ADD_PRODUCT_SUCCESS,\n  ADD_PRODUCT_FAIL,\n  ALL_PRODUCT_REQUEST,\n  ALL_PRODUCT_SUCCESS,\n  ALL_PRODUCT_FAIL,\n  FIND_PRODUCT_REQUEST,\n  FIND_PRODUCT_SUCCESS,\n  FIND_PRODUCT_FAIL,\n  UPDATE_PRODUCT_SUCCESS,\n  UPDATE_PRODUCT_FAIL,\n  UPDATE_PRODUCT_REQUEST,\n} from '../constants/ProductConstants'\n\nimport axios from 'axios'\nimport {BASE_URL} from \"../../services/axios\"\n\nexport const allProducts = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ALL_PRODUCT_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`${BASE_URL}/product`, config)\n\n    dispatch({\n      type: ALL_PRODUCT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ALL_PRODUCT_FAIL,\n      payload:\n        error.response && error.response.data.message ? error.response.data.message : error.message,\n    })\n  }\n}\n\nexport const uploadProduct = (formData) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ADD_PRODUCT_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`${BASE_URL}/product`, formData, config)\n\n    dispatch({\n      type: ADD_PRODUCT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ADD_PRODUCT_FAIL,\n      payload:\n        error.response && error.response.data.message ? error.response.data.message : error.message,\n    })\n  }\n}\n\nexport const findProductByQrId = (qrId) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: FIND_PRODUCT_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`${BASE_URL}/product/qrId`, { qrId }, config)\n\n    dispatch({\n      type: FIND_PRODUCT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: FIND_PRODUCT_FAIL,\n      payload:\n        error.response && error.response.data.message ? error.response.data.message : error.message,\n    })\n  }\n}\n\nexport const updateProducts = (formData) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: UPDATE_PRODUCT_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(`${BASE_URL}/product`, formData, config)\n\n    dispatch({\n      type: UPDATE_PRODUCT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PRODUCT_FAIL,\n      payload:\n        error.response && error.response.data.message ? error.response.data.message : error.message,\n    })\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  CRow,\n  CCol,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CAlert,\n  CFormSelect,\n  CFormTextarea,\n} from '@coreui/react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { allProducts } from 'src/services/actions/productActions'\nimport { addComplaint } from 'src/services/actions/complaintActions'\nimport { Alert } from 'src/components/Alert'\nimport Breadcrumbs from 'src/components/Breadcrumbs'\nimport { Checkbox } from 'antd'\nimport axios from 'axios'\nimport QRCode from 'qrcode'\nimport {BASE_URL} from \"../../../services/axios\"\nconst AddLab = () => {\n  const breadCrumbsInfo = [{ name: 'Home', href: '/' }, { name: 'Lab' }, { name: 'Add Lab' }]\n  const [name, setName] = useState()\n  const [softwares, setSoftwares] = useState()\n  const [loading, setLoading] = useState(false)\n  const [imageUrl, setImageUrl] = useState('')\n  const [qrId, setQrId] = useState()\n\n  function onChange(checkedValues) {\n    console.log('checked = ', checkedValues)\n    setSoftwares(checkedValues)\n  }\n\n  const submitHandler = async (e) => {\n    setLoading(true)\n    e.preventDefault()\n    console.log(name, softwares)\n    let LabData = {\n      name,\n      softwares,\n      imageUrl,\n      qrId\n    }\n    const { data } = await axios.post(`${BASE_URL}/lab/`, LabData)\n    if (data.success) {\n      setLoading(false)\n    }\n  }\n\n  const generateQrCode = async (e) => {\n    e.preventDefault()\n    try {\n      const id = Date.now().toString(36) + Math.random().toString(36)\n      const response = await QRCode.toDataURL(id)\n      setImageUrl(response)\n      setQrId(id)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <>\n      {' '}\n      <main className=\"main-div\">\n        <Breadcrumbs breadCrumbsInfo={breadCrumbsInfo} />\n        <div className=\"bg-white p-3 shadow-sm rounded-sm mt-3\">\n          <CRow className=\"justify-content-center\">\n            <CCol md={12} className=\"bg-white rounded-lg\">\n              <CForm className=\"row mx-4 g-3\">\n                <CCol md={12}>\n                  {/* {error && (\n                            <Alert msg={error} color={\"danger\"} />\n                        )} */}\n                </CCol>\n                <CCol md={12}>\n                  {/* {result && (\n                            <Alert msg={\"Complaint has been registered\"} color={\"success\"} />\n                        )} */}\n                </CCol>\n                <CCol md={12}>\n                  <p className=\"text-gray-800 dark:text-gray-200 text-xl font-bold\">Add Lab</p>\n                </CCol>\n                <CCol md={6}>\n                  <CInputGroup className=\"mb-4\">\n                    <CInputGroupText>\n                      <i class=\"fas fa-signature\"></i>\n                    </CInputGroupText>\n                    <CFormInput\n                      placeholder=\"Name\"\n                      autoComplete=\"\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n                <CCol md={3}>\n                    <button\n                      className=\"py-2 px-4  bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500 focus:ring-offset-indigo-200 text-white w-full transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2  rounded-lg\"\n                      onClick={(e) => generateQrCode(e)}\n                    >\n                      Generate Qr Code\n                    </button>\n                  </CCol>\n                  <CCol md={3} className='mt-0'>\n                    <CInputGroup className=\"d-flex justify-content-center align-items-center\">\n                      {imageUrl ? (\n                        <a href={imageUrl} download>\n                          <img src={imageUrl} alt=\"img\" />\n                        </a>\n                      ) : null}\n                    </CInputGroup>\n                  </CCol>\n                <CRow>\n                  <Checkbox.Group style={{ width: '100vw' }} onChange={onChange}>\n                    <CCol md={12}>\n                      <h3>softwares:</h3>\n\n                      <Checkbox value=\"Netbeans\" className=\"me-3\">\n                        {' '}\n                        Netbeans\n                      </Checkbox>\n\n                      <Checkbox value=\"Erwin\" className=\"me-3\">\n                        {' '}\n                        Erwin\n                      </Checkbox>\n\n                      <Checkbox value=\"SQL Server\" className=\"me-3\">\n                        {' '}\n                        SQL Server\n                      </Checkbox>\n\n                      <Checkbox value=\"MySQL\" className=\"me-3\">\n                        {' '}\n                        MySQL\n                      </Checkbox>\n\n                      <Checkbox value=\"Code Blocks\" className=\"me-3\">\n                        {' '}\n                        Code Blocks\n                      </Checkbox>\n\n                      <Checkbox value=\"Packet Tracer 6.2\" className=\"me-3\">\n                        {' '}\n                        Packet Tracer 6.2\n                      </Checkbox>\n\n                      <Checkbox value=\"Just In Mind\" className=\"me-3\">\n                        {' '}\n                        Just In Mind\n                      </Checkbox>\n                      <Checkbox value=\"File of Ubuntu\" className=\"me-3\">\n                        {' '}\n                        File of Ubuntu\n                      </Checkbox>\n                      <Checkbox value=\"PHPSTORM\" className=\"me-3\">\n                        {' '}\n                        PHPSTORM\n                      </Checkbox>\n                      <Checkbox value=\"XAMPP and WAMP\" className=\"me-3\">\n                        {' '}\n                        XAMPP and WAMP\n                      </Checkbox>\n                      <Checkbox value=\"MySQL Work Bench\" className=\"me-3\">\n                        {' '}\n                        MySQL Work Bench\n                      </Checkbox>\n                      <Checkbox value=\"MS project 2010\" className=\"me-3\">\n                        {' '}\n                        MS project 2010\n                      </Checkbox>\n                      <Checkbox value=\"MS professional visio\" className=\"me-3\">\n                        {' '}\n                        MS professional visio\n                      </Checkbox>\n                      <Checkbox value=\"Balmasiq\" className=\"me-3\">\n                        {' '}\n                        Balmasiq\n                      </Checkbox>\n                      <Checkbox value=\"EMU8086\" className=\"me-3\">\n                        {' '}\n                        EMU8086\n                      </Checkbox>\n                      <Checkbox value=\"Eclipse\" className=\"me-3\">\n                        {' '}\n                        Eclipse\n                      </Checkbox>\n                      <Checkbox value=\"Java\" className=\"me-3\">\n                        {' '}\n                        Java\n                      </Checkbox>\n                      <Checkbox value=\"MS Office\" className=\"me-3\">\n                        {' '}\n                        MS Office\n                      </Checkbox>\n                      <Checkbox value=\"MS Access\" className=\"me-3\">\n                        {' '}\n                        MS Access\n                      </Checkbox>\n                      <Checkbox value=\"SunScratchday\" className=\"me-3\">\n                        {' '}\n                        Scratch\n                      </Checkbox>\n                      <Checkbox value=\"Matlab\" className=\"me-3\">\n                        {' '}\n                        Matlab\n                      </Checkbox>\n                      <Checkbox value=\"C++\" className=\"me-3\">\n                        {' '}\n                        C++\n                      </Checkbox>\n                      <Checkbox value=\"Notepad++\" className=\"me-3\">\n                        {' '}\n                        Notepad++\n                      </Checkbox>\n                      <Checkbox value=\"Workstation\" className=\"me-3\">\n                        {' '}\n                        Workstation\n                      </Checkbox>\n                      <p className=\"fw-light\">\n                        check the boxes you want to add softwares to this lab\n                      </p>\n                    </CCol>\n                  </Checkbox.Group>\n                </CRow>\n\n                <CRow className=\"flex items-center justify-start mb-3\">\n                  <CCol md={3} xs={8}>\n                    <button\n                      onClick={(e) => submitHandler(e)}\n                      className=\"py-2 px-4 mt-2 bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500 focus:ring-offset-indigo-200 text-white w-full transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2  rounded-lg \"\n                    >\n                      {loading ? 'Loading...' : 'Add Lab'}\n                    </button>\n                  </CCol>\n                </CRow>\n              </CForm>\n            </CCol>\n          </CRow>\n        </div>\n      </main>\n    </>\n  )\n}\n\nexport default AddLab\n\n// const [filteredProducts, setFilteredProducts] = useState([]);\n// const dispatch = useDispatch()\n// const { products } = useSelector((state) => state.allProductRed)\n// const { userInfo } = useSelector((state) => state.userLogin)\n// const { error, loading, result } = useSelector((state) => state.addComplaint)\n\n// useEffect(() => {\n//     dispatch(allProducts())\n// }, [dispatch])\n\n// const labHandler = (lab) => {\n//     const labProducts = products.filter((item) => item.lab == lab);\n//     setFilteredProducts(labProducts);\n//     setComplaint({ ...complaint, lab: lab })\n// }\n// const submitHandler = (e) => {\n//     e.preventDefault()\n//     let data = {\n//         ...complaint, user: userInfo._id\n//     }\n//     dispatch(addComplaint(data));\n// }\n"],"names":["Alert","msg","color","style","textAlign","props","className","margin","breadCrumbsInfo","length","map","item","href","name","addComplaint","Data","dispatch","getState","type","ADD_COMPLAINT_REQUEST","userInfo","userLogin","config","headers","Authorization","token","axios","BASE_URL","data","ADD_COMPLAINT_SUCCESS","payload","ADD_COMPLAINT_FAIL","response","message","complaintApproveByDco","_id","COMPLAINT_DCO_APPROVE_REQUEST","COMPLAINT_DCO_APPROVE_SUCCESS","COMPLAINT_DCO_APRROVE_FAIL","complaintRejectByDco","COMPLAINT_DCO_REJECT_REQUEST","COMPLAINT_DCO_REJECT_SUCCESS","COMPLAINT_DCO_REJECT_FAIL","allProducts","ALL_PRODUCT_REQUEST","ALL_PRODUCT_SUCCESS","ALL_PRODUCT_FAIL","uploadProduct","formData","ADD_PRODUCT_REQUEST","ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAIL","findProductByQrId","qrId","FIND_PRODUCT_REQUEST","FIND_PRODUCT_SUCCESS","FIND_PRODUCT_FAIL","updateProducts","UPDATE_PRODUCT_REQUEST","UPDATE_PRODUCT_SUCCESS","UPDATE_PRODUCT_FAIL","useState","setName","softwares","setSoftwares","loading","setLoading","imageUrl","setImageUrl","setQrId","submitHandler","e","preventDefault","console","log","LabData","success","generateQrCode","id","Date","now","toString","Math","random","QRCode","md","class","placeholder","autoComplete","value","onChange","target","required","onClick","download","src","alt","width","checkedValues","xs"],"sourceRoot":""}